install.packages("robustbase")
library("MASS")
library("robustbase")
data(hbk)
summary(hbk)
plot(hbk)
# Creating data matrix
hbk.x <- data.matrix(hbk[,1:3])
cat("mean(x1) = ", mean(hbk[,1]))
cat("median(x1) = ", median(hbk[,1]))
cat("20% trimmed mean(x1) = ", mean(hbk[,1], trim = 0.2))   #20% off both ends
cat("covMcd location(x1) = ", covMcd(hbk.x)$center[1])
cat("cov.rob location(x1) = ", cov.rob(hbk.x)$center[1])
cat("mean(x1) = ", mean(hbk[,1]))
cat("median(x1) = ", median(hbk[,1]))
cat("20% trimmed mean(x1) = ", mean(hbk[,1], trim = 0.2))   #20% off both ends
cat("covMcd location(x1) = ", covMcd(hbk.x)$center[1])
cat("cov.rob location(x1) = ", cov.rob(hbk.x)$center[1])
cat("mean(x1) = ", mean(hbk[,1]))
cat("median(x1) = ", median(hbk[,1]))
cat("20% trimmed mean(x1) = ", mean(hbk[,1], trim = 0.2))   #20% off both ends (10 from each side)
cat("mean(x1) = ", mean(hbk[,1]))
cat("median(x1) = ", median(hbk[,1]))
cat("20% trimmed mean(x1) = ", mean(hbk[,1], trim = 0.2))   #20% off both ends (10 from each side)
#typically people will trim 10%
cat("covMcd location(x1) = ", covMcd(hbk.x)$center[1])
#Mcd - median coveriance determinant -- important using the median
cat("cov.rob location(x1) = ", cov.rob(hbk.x)$center[1])
cat("StdDev(x1) = ", sd(hbk[,1]))
cat("MAD(x1) = ", mad(hbk[,1]))   # The default constant = 1.4826
cat("0.7413*IQR(x1) = ", 0.7413*IQR(hbk[,1]))
cat("covMcd scale(x1) = ", sqrt(covMcd(hbk.x)$cov[1,1]))
cat("cov.rob scale(x1) = ", sqrt(cov.rob(hbk.x)$cov[1,1]))
# OLS model-hbk
model.lm = lm(Y~., data = hbk)
summary(model.lm)
confint(model.lm, level=0.95)
summary(model.lm)
confint(model.lm, level=0.95)
# Robust Model - hbk
model.robust1 = rlm(Y~., data = hbk)
summary(model.robust1)
BodyFat <- read_csv("~/BodyFat.csv")
BodyFat <- read_csv("BodyFat.csv")
View(BodyFat)
summary(BodyFat)
# OLS Model - BodyFat
model.lm3 = lm(BodyFat~Abdomen, data = BodyFat)
summary(model.lm3)
# Robust Model - BodyFat
model.robust3 = rlm(BodyFat~Abdomen, data = BodyFat)
summary(model.robust3)
# Second file with outlier removed – BodyFat2
BodyFat2 <- read_csv("H:/BodyFat2.csv")
# Second file with outlier removed – BodyFat2
BodyFat2 <- read_csv("BodyFat2.csv")
View(BodyFat2)
summary(BodyFat2)
plot(BodyFat2)
plot(BodyFat)
plot(BodyFat2)
# OLS Model – BodyFat2
model.lm4 = lm(BodyFat~Abdomen, data = BodyFat2)
summary(model.lm4)
# Robust Model - BodyFat2
model.robust4 = rlm(BodyFat~Abdomen, data = BodyFat2)
summary(model.robust4)
# Read in Crime1 Data
Crime1 <- read_csv("Crime1.csv")
View(Crime1)
summary(Crime1)
r
# OLS Model
summary(ols <- lm(crime ~ poverty + single, data = Crime1))
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1)
par(opar)
Crime1[c(9, 25, 51), 1:2]
plot(ols, las = 1)
# Diagnostic plots
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1) # see 3 outliers 9, 25, 51
par(opar)
Crime1[c(9, 25, 51), 1:2]
# Diagnostic plots
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1) # see 3 outliers 9, 25, 51
opar
plot(ols, las = 1) # see 3 outliers 9, 25, 51
par(opar)
Crime1[c(9, 25, 51), 1:2]
Crime1[c(9, 25, 51), 1:2]
?plot
# Cook’s Distance and Residuals
d1 <- cooks.distance(ols)
r <- stdres(ols)
a <- cbind(Crime1, d1, r)
a[d1 > 4/51, ]
# Generating a new variable and looking at the absolute value of the residuals
rabs <- abs(r)
a <- cbind(Crime1, d1, r, rabs)
asorted <- a[order(-rabs), ]
asorted[1:10, ]
# Running our first Robust Regression using Huber Weights
summary(rr.huber <- rlm(crime ~ poverty + single, data = Crime1))
# Creating a data frame to display the output for first 15 States
hweights <- data.frame(State = Crime1$State, resid = rr.huber$resid, weight = rr.huber$w)
hweights2 <- hweights[order(rr.huber$w), ]
hweights2[1:15, ]
# Running our second Robust Regression using the bisquare weighting function
rr.bisquare <- rlm(crime ~ poverty + single, data=Crime1, psi = psi.bisquare)
summary(rr.bisquare)
biweights <- data.frame(State = Crime1$State, resid = rr.bisquare$resid, weight = rr.bisquare$w)
biweights2 <- biweights[order(rr.bisquare$w), ]
biweights2[1:15, ]
library('dplyr')
library('jsonlite')
library('readr')
options(scipen=999)
data <- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Data.csv')
data <- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Data.csv')
View(data)
meta<- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Definition and Source.csv')
View(meta)
Prelim Data2 (1)/718a0a51-7e31-4851-bce7-4403cc3e4913_Country - Metadata.csv
meta<- read.csv('Project 3 Prelim Data2 (1)/718a0a51-7e31-4851-bce7-4403cc3e4913_Country - Metadata.csv')
View(meta)
# get region
merged <- merge(data, meta, by.x = 'Country.Code', by.y = 'Code')
merged <- merged[merged$Region == 'Sub-Saharan Africa',]
summary(merged)
View(merged)
data <- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Data.csv')
data <- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Data.csv')
View(data)
setwd("~/WebstormProjects/major-studio1/projects/project3/data")
data <- read.csv('Project 3 Data (1)/04c579fd-9f17-4051-b119-4ca87bf9d743_Data.csv')
glimpse(data)
data <- read.csv('Project 3 Data (1)/33165b1a-c572-4ad1-89ac-6a488a71c0af_Data.csv')
glimpse(data)
meta<- read.csv('Project 3 Prelim Data2 (1)/718a0a51-7e31-4851-bce7-4403cc3e4913_Country - Metadata.csv')
View(meta)
# get region
merged <- merge(data, meta, by.x = 'Country.Code', by.y = 'Code')
merged <- merged[merged$Region == 'Sub-Saharan Africa',]
summary(merged)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
GDP..current.US....NY.GDP.MKTP.CD.,
Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
GDP..current.US....NY.GDP.MKTP.CD.,
Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
GDP..current.US....NY.GDP.MKTP.CD.,
Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.)
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
# Population_total = Population..total..SP.POP.TOTL.,
# GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
data <- read.csv('Project 3 Data (1)/33165b1a-c572-4ad1-89ac-6a488a71c0af_Data.csv')
glimpse(data)
meta<- read.csv('Project 3 Prelim Data2 (1)/718a0a51-7e31-4851-bce7-4403cc3e4913_Country - Metadata.csv')
View(meta)
# get region
merged <- merge(data, meta, by.x = 'Country.Code', by.y = 'Code')
merged <- merged[merged$Region == 'Sub-Saharan Africa',]
summary(merged)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
# Population_total = Population..total..SP.POP.TOTL.,
# GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
library('dplyr')
library('jsonlite')
library('readr')
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
# Population_total = Population..total..SP.POP.TOTL.,
# GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.
# Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
# GDP..current.US....NY.GDP.MKTP.CD.,
# Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
# Population_total = Population..total..SP.POP.TOTL.,
# GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
GDP..current.US....NY.GDP.MKTP.CD.,
Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
col(merged)
glimpse(merged)
test<- merged %>% select(Country.Name, Country.Code, Time)
library('dplyr')
library('jsonlite')
library('readr')
options(scipen=999)
detach("package:MASS", unload=TRUE)
country_data <- merged %>%
select(Country.Name, Country.Code, Time, Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS., Agricultural.machinery..tractors..AG.AGR.TRAC.NO., Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS., Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD., Agricultural.land....of.land.area...AG.LND.AGRI.ZS., Agriculture..value.added..annual...growth...NV.AGR.TOTL.KD.ZG., Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT., Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN., Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN., Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS., Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS., Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP., Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS., Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
Income.share.held.by.lowest.10...SI.DST.FRST.10.,
Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Account..income..poorest.40.....ages.15....ts...WP_time_10.8.,
GDP..current.US....NY.GDP.MKTP.CD.,
Population..total..SP.POP.TOTL.
) %>%
rename(AgriValuePerWorker = Agriculture.value.added.per.worker..constant.2010.US....EA.PRD.AGRI.KD.,
RuralPovGap = Rural.poverty.gap.at.national.poverty.lines......SI.POV.RUGP.,
RuralPopPerc = Rural.population....of.total.population...SP.RUR.TOTL.ZS.,
FoodDeficit = Depth.of.the.food.deficit..kilocalories.per.person.per.day...SN.ITK.DFCT.,
IrrigatedLandPerc = Agricultural.irrigated.land....of.total.agricultural.land...AG.LND.IRIG.AG.ZS.,
TractorsNum = Agricultural.machinery..tractors..AG.AGR.TRAC.NO.,
TractorsRel = Agricultural.machinery..tractors.per.100.sq..km.of.arable.land..AG.LND.TRAC.ZS.,
FoodExportsP = Food.exports....of.merchandise.exports...TX.VAL.FOOD.ZS.UN.,
FoodImportsP = Food.imports....of.merchandise.imports...TM.VAL.FOOD.ZS.UN.,
FertilizerConsump = Fertilizer.consumption....of.fertilizer.production...AG.CON.FERT.PT.ZS.,
FertilizerConsumpPerHA = Fertilizer.consumption..kilograms.per.hectare.of.arable.land...AG.CON.FERT.ZS.,
EmployInAg = Employment.in.agriculture....of.total.employment...SL.AGR.EMPL.ZS.,
Country = Country.Name,
IncomeShareLowest10 = Income.share.held.by.lowest.10...SI.DST.FRST.10.,
IncomeShareLowest20 = Income.share.held.by.lowest.20...SI.DST.FRST.20.,
Population_total = Population..total..SP.POP.TOTL.,
GDP = GDP..current.US....NY.GDP.MKTP.CD.
)
country_data$Time = as.numeric(country_data$Time)
glimpse(country_data)
crops <- read.csv('CpC2.csv')
# summary(crops)
crops <- crops[order(crops$Area, crops$Year, -crops$Value, crops$Item),]
# gets the total number of crops for each country/year
grouped_summary <- crops %>%
group_by(Area, Year) %>%
summarise(totalValue = sum(Value, na.rm= TRUE))
crops <- read.csv('CpC2.csv')
# gets the total number of crops for each country/year
grouped_summary <- crops %>%
group_by(Area, Year) %>%
summarise(totalValue = sum(Value, na.rm= TRUE))
# add total column to full data
merged_crops <- left_join(crops, grouped_summary, by= c("Area", "Year"))
# calculate % of total
merged_crops$percentOfTotal<- merged_crops$Value/merged_crops$totalValue
merged_crops = merged_crops[order(merged_crops$Area, merged_crops$Year, -merged_crops$percentOfTotal),]
# get top 10 crops
top_crops <- merged_crops %>%
group_by(Area, Year) %>%
filter(row_number() <= 10) %>%
select(Area, Year, Unit, Value, Item, totalValue, percentOfTotal)
top_crops_top_summary <- top_crops %>%
group_by(Area, Year) %>%
summarise(subtotalValue = sum(Value, na.rm= TRUE))
merged_top_crops<- left_join(top_crops, top_crops_top_summary, by = c("Area", "Year"))
merged_top_crops$percentOfSubtotal<- merged_top_crops$Value/merged_top_crops$subtotalValue
final_crop_data <- right_join(country_data, top_crops, by= c ("Country" = "Area", "Time" = "Year"))
View(final_data[final_data$Time >= 2004,])
View(final_crop_data[final_data$Time >= 2004,])
View(final_crop_data[final_crop_data$Time >= 2004,])
final_crop_data <- final_crop_data %>%
filter(Time >= 2004) %>%
toJSON() %>%
write_lines('cropdata.json')
crops <- read.csv('CpC2.csv')
# summary(crops)
crops <- crops[order(crops$Area, crops$Year, -crops$Value, crops$Item),]
# gets the total number of crops for each country/year
grouped_summary <- crops %>%
group_by(Area, Year) %>%
summarise(totalValue = sum(Value, na.rm= TRUE))
# add total column to full data
merged_crops <- left_join(crops, grouped_summary, by= c("Area", "Year"))
# calculate % of total
merged_crops$percentOfTotal<- merged_crops$Value/merged_crops$totalValue
top_crops <- merged_crops %>%
group_by(Area, Year) %>%
filter(row_number() ==1) %>%
select(Area, Year, Unit, Value, Item, totalValue, percentOfTotal)
# country_data$Time = as.integer(country_data$Time)
top_crops$Year = as.factor(top_crops$Year)
crops <- read.csv('CpC2.csv')
# gets the total number of crops for each country/year
grouped_summary <- crops %>%
group_by(Area, Year) %>%
summarise(totalValue = sum(Value, na.rm= TRUE))
# add total column to full data
merged_crops <- left_join(crops, grouped_summary, by= c("Area", "Year"))
# calculate % of total
merged_crops$percentOfTotal<- merged_crops$Value/merged_crops$totalValue
merged_crops = merged_crops[order(merged_crops$Area, merged_crops$Year, -merged_crops$percentOfTotal),]
# get top 10 crops
top_crops <- merged_crops %>%
group_by(Area, Year) %>%
filter(row_number() <= 10) %>%
select(Area, Year, Unit, Value, Item, totalValue, percentOfTotal)
top_crops_top_summary <- top_crops %>%
group_by(Area, Year) %>%
summarise(subtotalValue = sum(Value, na.rm= TRUE))
merged_top_crops<- left_join(top_crops, top_crops_top_summary, by = c("Area", "Year"))
merged_top_crops$percentOfSubtotal<- merged_top_crops$Value/merged_top_crops$subtotalValue
final_crop_data <- right_join(country_data, merged_top_crops, by= c ("Country" = "Area", "Time" = "Year"))
View(final_crop_data[final_crop_data$Time >= 2004,])
final_crop_data <- final_crop_data %>%
filter(Time >= 2004) %>%
toJSON() %>%
write_lines('cropdata.json')
